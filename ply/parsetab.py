
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftIFleftELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassocGTELTENEQEQGTLTleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVrightUMINUSright'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instr_rec\n               | instr_rec : instr_rec instr\n                 | instrinstr : instr_colon ';'\n             | instr_coloffinstr_colon : assign\n                   | expr\n                   | print\n                   | returninstr_coloff : for\n                    | while\n                    | block\n                    | ifinstr_inside_loop : instr_colon ';'\n                         | instr_coloff_inside_loopinstr_coloff_inside_loop : for\n                                | while\n                                | block_loop\n                                | if_inside_loopexpr : INTNUMexpr : FLOATNUMexpr : STRINGexpr : idexpr : expr_relexpr : '(' expr ')'expr : '-' expr %prec UMINUSexpr : expr '\\''expr : '[' rows ']'expr : expr '+' expr\n            | expr '-' expr\n            | expr '/' expr\n            | expr '*' exprexpr : ZEROS '(' INTNUM ')'\n            | ONES '(' INTNUM ')'\n            | EYE '(' INTNUM ')'expr : expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTDIV expr\n            | expr DOTMUL exprexpr_rel : expr GTE expr\n                | expr LTE expr\n                | expr NEQ expr\n                | expr EQ expr\n                | expr GT expr\n                | expr LT exprassign : id '=' expr\n              | id ADDASSIGN expr\n              | id SUBASSIGN expr\n              | id MULASSIGN expr\n              | id DIVASSIGN exprrows : rows ',' row\n            | rowrow : '[' cells ']'cells : cells ',' expr\n             | exprif : IF '(' expr_rel ')' instr %prec IF\n          | IF '(' expr_rel ')' instr ELSE instrif_inside_loop : IF '(' expr_rel ')' inside_loop %prec IF\n                      | IF '(' expr_rel ')' inside_loop ELSE inside_loopfor : FOR ID '=' index ':' index inside_loopwhile : WHILE '(' expr_rel ')' inside_loopinside_loop : break_continue ';'\n                   | instr_inside_loopinside_loop_rec : inside_loop_rec inside_loop\n                       | inside_loopblock_loop : '{' inside_loop_rec '}'block : '{' instr_rec '}'print : PRINT cellsreturn : RETURN exprid : nonref\n          | refnonref : IDref : ID '[' index ',' index ']'index : IDindex : INTNUMbreak_continue : break\n                      | continuebreak : BREAKcontinue : CONTINUE"
    
_lr_action_items = {'DOTDIV':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,56,-24,56,56,56,-27,-28,-25,56,56,56,56,56,56,-26,-29,-25,-39,56,56,56,-33,56,-32,56,56,56,56,-40,56,56,56,-36,-34,-35,-74,-25,]),'SUBASSIGN':([1,9,24,26,142,],[-71,40,-73,-72,-74,]),'RETURN':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[2,-4,-14,-11,2,-6,-12,2,-13,-3,-5,2,-76,-75,-68,2,2,-62,-19,-17,-64,-16,-20,-18,2,-57,-63,-15,-66,2,2,2,-65,-67,-61,-58,2,-59,2,-60,]),'FLOATNUM':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[5,5,-4,5,-14,-11,5,5,5,-6,-12,5,-13,5,5,5,5,5,5,-3,-5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-76,-75,-68,5,5,-62,-19,-17,-64,-16,-20,-18,5,-57,-63,-15,5,-66,5,5,5,-65,-67,-61,-58,5,-59,5,-60,]),'DOTADD':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,65,-24,65,65,65,-27,-28,-25,65,65,65,65,65,65,-26,-29,-25,-39,65,65,-30,-33,-31,-32,-38,-37,65,65,-40,65,65,65,-36,-34,-35,-74,-25,]),'WHILE':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[6,-4,-14,-11,6,-6,-12,6,-13,-3,-5,6,-76,-75,-68,6,6,-62,-19,-17,-64,-16,-20,-18,6,-57,-63,-15,-66,6,6,6,-65,-67,-61,-58,6,-59,6,-60,]),'PRINT':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[7,-4,-14,-11,7,-6,-12,7,-13,-3,-5,7,-76,-75,-68,7,7,-62,-19,-17,-64,-16,-20,-18,7,-57,-63,-15,-66,7,7,7,-65,-67,-61,-58,7,-59,7,-60,]),'DOTMUL':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,68,-24,68,68,68,-27,-28,-25,68,68,68,68,68,68,-26,-29,-25,-39,68,68,68,-33,68,-32,68,68,68,68,-40,68,68,68,-36,-34,-35,-74,-25,]),'NEQ':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,70,-24,70,70,70,-27,-28,-25,70,70,70,70,70,70,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,70,-36,-34,-35,-74,-25,]),'INTNUM':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,39,40,41,42,43,44,47,49,50,52,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,75,83,89,90,107,108,115,116,118,119,120,122,126,128,130,132,133,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[11,11,-4,11,-14,-11,11,11,11,-6,-12,11,-13,11,76,11,11,11,11,11,-3,84,-5,11,89,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,106,11,11,89,-76,-75,-68,11,89,11,-62,-19,-17,-64,-16,-20,-18,11,89,-57,-63,-15,11,-66,11,11,11,-65,-67,-61,-58,11,-59,11,-60,]),"'":([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,59,-24,59,59,59,59,-28,-25,59,59,59,59,59,59,-26,-29,-25,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-36,-34,-35,-74,-25,]),')':([1,3,5,11,19,24,26,34,45,46,59,73,76,82,84,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,112,117,142,144,],[-71,-25,-22,-21,-23,-73,-72,-24,82,-27,-28,108,110,-26,112,-29,116,-39,-45,-41,-30,-33,-31,-32,-38,-37,-46,-42,-40,-44,-43,117,-36,-34,-35,-74,149,]),'(':([0,2,4,6,7,8,10,12,13,14,17,21,25,27,29,30,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,127,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[13,13,-4,36,13,39,-14,-11,13,13,13,49,55,-6,-12,71,13,-13,13,13,13,13,13,13,-3,-5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-76,-75,-68,13,13,-62,-19,-17,-64,-16,138,-20,-18,13,-57,-63,-15,13,-66,13,13,13,-65,-67,-61,-58,13,-59,13,-60,]),'+':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,60,-24,60,60,60,-27,-28,-25,60,60,60,60,60,60,-26,-29,-25,-39,60,60,-30,-33,-31,-32,-38,-37,60,60,-40,60,60,60,-36,-34,-35,-74,-25,]),'*':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,61,-24,61,61,61,-27,-28,-25,61,61,61,61,61,61,-26,-29,-25,-39,61,61,61,-33,61,-32,61,61,61,61,-40,61,61,61,-36,-34,-35,-74,-25,]),'-':([0,1,2,3,4,5,7,9,10,11,12,13,14,17,19,24,26,27,28,29,31,33,34,35,36,37,40,41,42,43,44,45,46,47,50,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,77,78,79,80,81,82,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,112,116,117,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,],[14,-71,14,-25,-4,-22,14,-24,-14,-21,-11,14,14,14,-23,-73,-72,-6,62,-12,14,-13,-24,62,14,62,14,14,14,14,14,62,-27,-3,-5,14,14,14,14,14,-28,14,14,14,14,14,14,14,14,14,14,14,14,-25,62,14,62,62,62,62,62,-26,-29,-76,-75,-25,-39,62,62,-30,-33,-31,-32,-38,-37,62,62,-40,62,62,-68,14,62,-36,-34,14,-35,-62,-19,-17,-64,-16,-20,-18,14,-57,-63,-15,14,-66,14,14,-74,14,-25,-65,-67,-61,-58,14,-59,14,-60,]),',':([1,3,5,11,19,24,26,34,37,38,46,51,53,59,82,85,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,113,114,117,142,],[-71,-25,-22,-21,-23,-73,-72,-24,-56,75,-27,86,-53,-28,-26,-29,75,115,-76,-75,-39,-45,-41,-30,-33,-31,-32,-38,-37,-46,-42,-40,-44,-43,-55,-36,-34,-52,-54,-35,-74,]),'/':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,63,-24,63,63,63,-27,-28,-25,63,63,63,63,63,63,-26,-29,-25,-39,63,63,63,-33,63,-32,63,63,63,63,-40,63,63,63,-36,-34,-35,-74,-25,]),'DIVASSIGN':([1,9,24,26,142,],[-71,41,-73,-72,-74,]),'LT':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,66,-24,66,66,66,-27,-28,-25,66,66,66,66,66,66,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,66,-36,-34,-35,-74,-25,]),'GTE':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,58,-24,58,58,58,-27,-28,-25,58,58,58,58,58,58,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,58,-36,-34,-35,-74,-25,]),'ADDASSIGN':([1,9,24,26,142,],[-71,43,-73,-72,-74,]),';':([1,3,5,9,11,16,18,19,22,24,26,28,32,34,35,37,38,46,59,77,78,79,80,81,82,85,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,121,123,124,125,129,131,142,],[-71,-25,-22,-24,-21,-9,-10,-23,50,-73,-72,-8,-7,-24,-70,-56,-69,-27,-28,-49,-51,-50,-48,-47,-26,-29,-39,-45,-41,-30,-33,-31,-32,-38,-37,-46,-42,-40,-44,-43,-55,-36,-34,-35,-80,-77,136,137,-79,-78,-74,]),':':([89,90,111,],[-76,-75,133,]),'=':([1,9,24,26,48,142,],[-71,44,-73,-72,83,-74,]),'$end':([0,4,10,12,15,17,27,29,33,47,50,107,118,119,120,122,126,128,130,135,136,137,146,147,148,150,152,],[-2,-4,-14,-11,0,-1,-6,-12,-13,-3,-5,-68,-62,-19,-17,-64,-16,-20,-18,-57,-63,-15,-67,-61,-58,-59,-60,]),'GT':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,57,-24,57,57,57,-27,-28,-25,57,57,57,57,57,57,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,57,-36,-34,-35,-74,-25,]),'EYE':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[8,8,-4,8,-14,-11,8,8,8,-6,-12,8,-13,8,8,8,8,8,8,-3,-5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-76,-75,-68,8,8,-62,-19,-17,-64,-16,-20,-18,8,-57,-63,-15,8,-66,8,8,8,-65,-67,-61,-58,8,-59,8,-60,]),'STRING':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[19,19,-4,19,-14,-11,19,19,19,-6,-12,19,-13,19,19,19,19,19,19,-3,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-76,-75,-68,19,19,-62,-19,-17,-64,-16,-20,-18,19,-57,-63,-15,19,-66,19,19,19,-65,-67,-61,-58,19,-59,19,-60,]),'FOR':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[20,-4,-14,-11,20,-6,-12,20,-13,-3,-5,20,-76,-75,-68,20,20,-62,-19,-17,-64,-16,-20,-18,20,-57,-63,-15,-66,20,20,20,-65,-67,-61,-58,20,-59,20,-60,]),'DOTSUB':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,64,-24,64,64,64,-27,-28,-25,64,64,64,64,64,64,-26,-29,-25,-39,64,64,-30,-33,-31,-32,-38,-37,64,64,-40,64,64,64,-36,-34,-35,-74,-25,]),'ONES':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[30,30,-4,30,-14,-11,30,30,30,-6,-12,30,-13,30,30,30,30,30,30,-3,-5,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-76,-75,-68,30,30,-62,-19,-17,-64,-16,-20,-18,30,-57,-63,-15,30,-66,30,30,30,-65,-67,-61,-58,30,-59,30,-60,]),'ZEROS':([0,2,4,7,10,12,13,14,17,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[21,21,-4,21,-14,-11,21,21,21,-6,-12,21,-13,21,21,21,21,21,21,-3,-5,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-76,-75,-68,21,21,-62,-19,-17,-64,-16,-20,-18,21,-57,-63,-15,21,-66,21,21,21,-65,-67,-61,-58,21,-59,21,-60,]),'LTE':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,67,-24,67,67,67,-27,-28,-25,67,67,67,67,67,67,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,67,-36,-34,-35,-74,-25,]),'[':([0,2,4,7,10,12,13,14,17,23,24,27,29,31,33,36,40,41,42,43,44,47,50,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,86,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[23,23,-4,23,-14,-11,23,23,23,52,54,-6,-12,23,-13,23,23,23,23,23,23,-3,-5,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,52,-76,-75,-68,23,23,-62,-19,-17,-64,-16,-20,-18,23,-57,-63,-15,23,-66,23,23,23,-65,-67,-61,-58,23,-59,23,-60,]),'ELSE':([10,12,27,29,33,50,107,118,119,120,122,126,128,130,135,136,137,146,147,148,150,152,],[-14,-11,-6,-12,-13,-5,-68,-62,-19,-17,-64,-16,-20,-18,143,-63,-15,-67,-61,-58,151,-60,]),']':([1,3,5,11,19,24,26,34,37,46,51,53,59,82,85,87,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,113,114,117,134,142,],[-71,-25,-22,-21,-23,-73,-72,-24,-56,-27,85,-53,-28,-26,-29,114,-76,-75,-39,-45,-41,-30,-33,-31,-32,-38,-37,-46,-42,-40,-44,-43,-55,-36,-34,-52,-54,-35,142,-74,]),'ID':([0,2,4,7,10,12,13,14,17,20,27,29,31,33,36,40,41,42,43,44,47,50,52,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,83,89,90,107,108,115,116,118,119,120,122,126,128,130,132,133,135,136,137,138,139,140,141,143,145,146,147,148,149,150,151,152,],[24,24,-4,24,-14,-11,24,24,24,48,-6,-12,24,-13,24,24,24,24,24,24,-3,-5,24,90,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,90,-76,-75,-68,24,90,24,-62,-19,-17,-64,-16,-20,-18,24,90,-57,-63,-15,24,-66,24,24,24,-65,-67,-61,-58,24,-59,24,-60,]),'IF':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[25,-4,-14,-11,25,-6,-12,25,-13,-3,-5,25,-76,-75,-68,127,25,-62,-19,-17,-64,-16,-20,-18,127,-57,-63,-15,-66,127,127,25,-65,-67,-61,-58,127,-59,127,-60,]),'EQ':([1,3,5,9,11,19,24,26,28,34,35,37,45,46,59,73,74,77,78,79,80,81,82,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,110,112,117,142,144,],[-71,-25,-22,-24,-21,-23,-73,-72,69,-24,69,69,69,-27,-28,-25,69,69,69,69,69,69,-26,-29,-25,-39,None,None,-30,-33,-31,-32,-38,-37,None,None,-40,None,None,69,-36,-34,-35,-74,-25,]),'BREAK':([89,90,108,118,119,120,122,126,128,130,132,136,137,139,140,141,145,146,147,149,150,151,152,],[-76,-75,129,-62,-19,-17,-64,-16,-20,-18,129,-63,-15,-66,129,129,-65,-67,-61,129,-59,129,-60,]),'CONTINUE':([89,90,108,118,119,120,122,126,128,130,132,136,137,139,140,141,145,146,147,149,150,151,152,],[-76,-75,121,-62,-19,-17,-64,-16,-20,-18,121,-63,-15,-66,121,121,-65,-67,-61,121,-59,121,-60,]),'MULASSIGN':([1,9,24,26,142,],[-71,42,-73,-72,-74,]),'{':([0,4,10,12,17,27,29,31,33,47,50,72,89,90,107,108,116,118,119,120,122,126,128,130,132,135,136,137,139,140,141,143,145,146,147,148,149,150,151,152,],[31,-4,-14,-11,31,-6,-12,31,-13,-3,-5,31,-76,-75,-68,132,31,-62,-19,-17,-64,-16,-20,-18,132,-57,-63,-15,-66,132,132,31,-65,-67,-61,-58,132,-59,132,-60,]),'}':([4,10,12,27,29,33,47,50,72,107,118,119,120,122,126,128,130,135,136,137,139,140,145,146,147,148,150,152,],[-4,-14,-11,-6,-12,-13,-3,-5,107,-68,-62,-19,-17,-64,-16,-20,-18,-57,-63,-15,-66,146,-65,-67,-61,-58,-59,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'nonref':([0,2,7,13,14,17,31,36,40,41,42,43,44,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,108,116,132,138,140,141,143,149,151,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'expr_rel':([0,2,7,13,14,17,31,36,40,41,42,43,44,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,108,116,132,138,140,141,143,149,151,],[3,3,3,3,3,3,3,73,3,3,3,3,3,3,91,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,144,3,3,3,3,3,]),'instr':([0,17,31,72,116,143,],[4,47,4,47,135,148,]),'inside_loop':([108,132,140,141,149,151,],[118,139,145,147,150,152,]),'block_loop':([108,132,140,141,149,151,],[119,119,119,119,119,119,]),'id':([0,2,7,13,14,17,31,36,40,41,42,43,44,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,108,116,132,138,140,141,143,149,151,],[9,34,34,34,34,9,9,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,9,34,9,9,9,34,9,9,9,9,9,]),'row':([23,86,],[53,113,]),'index':([54,83,115,133,],[88,111,134,141,]),'rows':([23,],[51,]),'for':([0,17,31,72,108,116,132,140,141,143,149,151,],[12,12,12,12,120,12,120,120,120,12,120,120,]),'program':([0,],[15,]),'print':([0,17,31,72,108,116,132,140,141,143,149,151,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'if':([0,17,31,72,116,143,],[10,10,10,10,10,10,]),'ref':([0,2,7,13,14,17,31,36,40,41,42,43,44,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,108,116,132,138,140,141,143,149,151,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'instr_inside_loop':([108,132,140,141,149,151,],[122,122,122,122,122,122,]),'instr_rec':([0,31,],[17,72,]),'return':([0,17,31,72,108,116,132,140,141,143,149,151,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'inside_loop_rec':([132,],[140,]),'break':([108,132,140,141,149,151,],[123,123,123,123,123,123,]),'break_continue':([108,132,140,141,149,151,],[124,124,124,124,124,124,]),'instr_colon':([0,17,31,72,108,116,132,140,141,143,149,151,],[22,22,22,22,125,22,125,125,125,22,125,125,]),'instr_coloff_inside_loop':([108,132,140,141,149,151,],[126,126,126,126,126,126,]),'if_inside_loop':([108,132,140,141,149,151,],[128,128,128,128,128,128,]),'instr_coloff':([0,17,31,72,116,143,],[27,27,27,27,27,27,]),'expr':([0,2,7,13,14,17,31,36,40,41,42,43,44,52,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,72,75,108,116,132,138,140,141,143,149,151,],[28,35,37,45,46,28,28,74,77,78,79,80,81,37,74,92,93,94,95,96,97,98,99,100,101,102,103,104,105,28,109,28,28,28,74,28,28,28,28,28,]),'cells':([7,52,],[38,87,]),'while':([0,17,31,72,108,116,132,140,141,143,149,151,],[29,29,29,29,130,29,130,130,130,29,130,130,]),'continue':([108,132,140,141,149,151,],[131,131,131,131,131,131,]),'assign':([0,17,31,72,108,116,132,140,141,143,149,151,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'block':([0,17,31,72,116,143,],[33,33,33,33,33,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instr_rec','program',1,'p_program','Mparser.py',28),
  ('program -> <empty>','program',0,'p_program','Mparser.py',29),
  ('instr_rec -> instr_rec instr','instr_rec',2,'p_instr_rec','Mparser.py',33),
  ('instr_rec -> instr','instr_rec',1,'p_instr_rec','Mparser.py',34),
  ('instr -> instr_colon ;','instr',2,'p_instr','Mparser.py',41),
  ('instr -> instr_coloff','instr',1,'p_instr','Mparser.py',42),
  ('instr_colon -> assign','instr_colon',1,'p_instr_colon','Mparser.py',46),
  ('instr_colon -> expr','instr_colon',1,'p_instr_colon','Mparser.py',47),
  ('instr_colon -> print','instr_colon',1,'p_instr_colon','Mparser.py',48),
  ('instr_colon -> return','instr_colon',1,'p_instr_colon','Mparser.py',49),
  ('instr_coloff -> for','instr_coloff',1,'p_instr_coloff','Mparser.py',53),
  ('instr_coloff -> while','instr_coloff',1,'p_instr_coloff','Mparser.py',54),
  ('instr_coloff -> block','instr_coloff',1,'p_instr_coloff','Mparser.py',55),
  ('instr_coloff -> if','instr_coloff',1,'p_instr_coloff','Mparser.py',56),
  ('instr_inside_loop -> instr_colon ;','instr_inside_loop',2,'p_instr_inside_loop','Mparser.py',60),
  ('instr_inside_loop -> instr_coloff_inside_loop','instr_inside_loop',1,'p_instr_inside_loop','Mparser.py',61),
  ('instr_coloff_inside_loop -> for','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',65),
  ('instr_coloff_inside_loop -> while','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',66),
  ('instr_coloff_inside_loop -> block_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',67),
  ('instr_coloff_inside_loop -> if_inside_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',68),
  ('expr -> INTNUM','expr',1,'p_expr_1','Mparser.py',74),
  ('expr -> FLOATNUM','expr',1,'p_expr_2','Mparser.py',78),
  ('expr -> STRING','expr',1,'p_expr_3','Mparser.py',82),
  ('expr -> id','expr',1,'p_expr_4','Mparser.py',86),
  ('expr -> expr_rel','expr',1,'p_expr_5','Mparser.py',90),
  ('expr -> ( expr )','expr',3,'p_expr_6','Mparser.py',94),
  ('expr -> - expr','expr',2,'p_expr_7','Mparser.py',98),
  ("expr -> expr '",'expr',2,'p_expr_8','Mparser.py',102),
  ('expr -> [ rows ]','expr',3,'p_expr_9','Mparser.py',106),
  ('expr -> expr + expr','expr',3,'p_expr_bin','Mparser.py',110),
  ('expr -> expr - expr','expr',3,'p_expr_bin','Mparser.py',111),
  ('expr -> expr / expr','expr',3,'p_expr_bin','Mparser.py',112),
  ('expr -> expr * expr','expr',3,'p_expr_bin','Mparser.py',113),
  ('expr -> ZEROS ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',117),
  ('expr -> ONES ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',118),
  ('expr -> EYE ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',119),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_dot','Mparser.py',123),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_dot','Mparser.py',124),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_dot','Mparser.py',125),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_dot','Mparser.py',126),
  ('expr_rel -> expr GTE expr','expr_rel',3,'p_expr_rel','Mparser.py',130),
  ('expr_rel -> expr LTE expr','expr_rel',3,'p_expr_rel','Mparser.py',131),
  ('expr_rel -> expr NEQ expr','expr_rel',3,'p_expr_rel','Mparser.py',132),
  ('expr_rel -> expr EQ expr','expr_rel',3,'p_expr_rel','Mparser.py',133),
  ('expr_rel -> expr GT expr','expr_rel',3,'p_expr_rel','Mparser.py',134),
  ('expr_rel -> expr LT expr','expr_rel',3,'p_expr_rel','Mparser.py',135),
  ('assign -> id = expr','assign',3,'p_assign','Mparser.py',139),
  ('assign -> id ADDASSIGN expr','assign',3,'p_assign','Mparser.py',140),
  ('assign -> id SUBASSIGN expr','assign',3,'p_assign','Mparser.py',141),
  ('assign -> id MULASSIGN expr','assign',3,'p_assign','Mparser.py',142),
  ('assign -> id DIVASSIGN expr','assign',3,'p_assign','Mparser.py',143),
  ('rows -> rows , row','rows',3,'p_rows','Mparser.py',148),
  ('rows -> row','rows',1,'p_rows','Mparser.py',149),
  ('row -> [ cells ]','row',3,'p_row','Mparser.py',156),
  ('cells -> cells , expr','cells',3,'p_cells','Mparser.py',160),
  ('cells -> expr','cells',1,'p_cells','Mparser.py',161),
  ('if -> IF ( expr_rel ) instr','if',5,'p_if','Mparser.py',170),
  ('if -> IF ( expr_rel ) instr ELSE instr','if',7,'p_if','Mparser.py',171),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop','if_inside_loop',5,'p_if_inside_loop','Mparser.py',178),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop ELSE inside_loop','if_inside_loop',7,'p_if_inside_loop','Mparser.py',179),
  ('for -> FOR ID = index : index inside_loop','for',7,'p_for','Mparser.py',186),
  ('while -> WHILE ( expr_rel ) inside_loop','while',5,'p_while','Mparser.py',190),
  ('inside_loop -> break_continue ;','inside_loop',2,'p_inside_loop','Mparser.py',194),
  ('inside_loop -> instr_inside_loop','inside_loop',1,'p_inside_loop','Mparser.py',195),
  ('inside_loop_rec -> inside_loop_rec inside_loop','inside_loop_rec',2,'p_inside_loop_rec','Mparser.py',199),
  ('inside_loop_rec -> inside_loop','inside_loop_rec',1,'p_inside_loop_rec','Mparser.py',200),
  ('block_loop -> { inside_loop_rec }','block_loop',3,'p_block_loop','Mparser.py',207),
  ('block -> { instr_rec }','block',3,'p_block','Mparser.py',211),
  ('print -> PRINT cells','print',2,'p_print','Mparser.py',217),
  ('return -> RETURN expr','return',2,'p_return','Mparser.py',221),
  ('id -> nonref','id',1,'p_id','Mparser.py',225),
  ('id -> ref','id',1,'p_id','Mparser.py',226),
  ('nonref -> ID','nonref',1,'p_nonref','Mparser.py',230),
  ('ref -> ID [ index , index ]','ref',6,'p_ref','Mparser.py',234),
  ('index -> ID','index',1,'p_index_ID','Mparser.py',238),
  ('index -> INTNUM','index',1,'p_index_IntNum','Mparser.py',242),
  ('break_continue -> break','break_continue',1,'p_break_continue','Mparser.py',246),
  ('break_continue -> continue','break_continue',1,'p_break_continue','Mparser.py',247),
  ('break -> BREAK','break',1,'p_break','Mparser.py',251),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',255),
]
