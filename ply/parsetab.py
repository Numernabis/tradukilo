
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '080499C6D47CA27F4757940F301B36E3'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,7,13,15,16,17,19,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,58,61,62,66,68,69,70,71,72,90,91,92,94,95,108,111,113,119,120,122,123,124,125,126,127,132,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[18,-14,-13,18,35,35,-12,-11,-4,35,18,59,35,-6,-3,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,18,92,-5,35,35,35,35,35,35,35,35,-68,-75,-76,92,18,92,18,-64,-18,-16,-20,-17,18,-19,-62,92,-58,-63,-66,18,-15,35,18,18,-67,-65,-61,-57,18,-60,18,-59,]),':':([92,94,112,],[-75,-76,132,]),'DOTADD':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[41,-27,-25,-28,-29,-26,-28,41,-38,-39,41,41,-29,41,-24,41,-33,41,-34,-35,-36,-21,-22,41,41,41,41,-23,-37,-29,-40,41,41,41,41,41,-32,41,-31,-30,-29,]),'EQ':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[42,-27,-25,-28,-29,-26,-28,42,-38,-39,42,42,-29,42,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,42,42,42,42,42,-32,42,-31,-30,-29,]),')':([11,12,20,27,35,37,46,60,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,97,98,99,100,109,114,115,144,],[-27,-25,-29,-26,-28,-38,-39,96,108,-24,-45,-33,-44,-34,-35,-36,-21,-22,-41,-43,-42,-46,-23,109,-37,113,114,115,-40,-32,-31,-30,147,]),'RETURN':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[4,-14,-13,4,-12,-11,-4,4,-6,-3,4,-5,-68,-75,-76,4,4,-64,-18,-16,-20,-17,4,-19,-62,-58,-63,-66,4,-15,4,4,-67,-65,-61,-57,4,-60,4,-59,]),'MULASSIGN':([8,18,21,33,139,],[-71,-73,-72,68,-74,]),'-':([0,1,2,3,4,5,7,10,11,12,13,15,16,17,18,20,22,27,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,60,61,62,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,94,96,97,100,103,104,105,106,107,108,109,110,113,114,115,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,144,145,146,147,148,149,150,],[5,-14,-13,5,5,5,-12,48,-27,-25,-11,-4,5,5,-28,-29,5,-26,-6,-3,-28,48,-38,5,5,5,5,5,5,5,5,-39,5,5,5,5,5,5,5,48,5,48,-5,5,5,5,5,5,5,5,-29,48,-24,48,-33,48,-34,-35,-36,-21,-22,48,48,48,48,-23,5,-68,-75,-76,-37,-29,-40,48,48,48,48,48,5,-32,48,5,-31,-30,-64,-18,-16,-20,-17,5,-19,-62,-58,-63,-66,5,-15,5,5,5,-67,-65,-29,-61,-57,5,-60,5,-59,]),'CONTINUE':([92,94,108,119,120,122,123,124,125,126,127,134,135,136,137,140,142,143,145,147,148,149,150,],[-75,-76,118,-64,-18,-16,-20,-17,118,-19,-62,-63,-66,118,-15,118,-67,-65,-61,118,-60,118,-59,]),'}':([1,2,7,13,15,30,34,57,61,91,119,120,122,123,124,126,127,133,134,135,136,137,142,143,145,146,148,150,],[-14,-13,-12,-11,-4,-6,-3,91,-5,-68,-64,-18,-16,-20,-17,-19,-62,-58,-63,-66,142,-15,-67,-65,-61,-57,-60,-59,]),'$end':([0,1,2,3,7,13,15,26,30,34,61,91,119,120,122,123,124,126,127,133,134,137,142,145,146,148,150,],[-2,-14,-13,-1,-12,-11,-4,0,-6,-3,-5,-68,-64,-18,-16,-20,-17,-19,-62,-58,-63,-15,-67,-61,-57,-60,-59,]),'EYE':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[14,-14,-13,14,14,14,-12,-11,-4,14,14,14,-6,-3,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-5,14,14,14,14,14,14,14,14,-68,-75,-76,14,14,-64,-18,-16,-20,-17,14,-19,-62,-58,-63,-66,14,-15,14,14,14,-67,-65,-61,-57,14,-60,14,-59,]),'WHILE':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[9,-14,-13,9,-12,-11,-4,9,-6,-3,9,-5,-68,-75,-76,9,9,-64,-18,-16,-20,-17,9,-19,-62,-58,-63,-66,9,-15,9,9,-67,-65,-61,-57,9,-60,9,-59,]),'NEQ':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[50,-27,-25,-28,-29,-26,-28,50,-38,-39,50,50,-29,50,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,50,50,50,50,50,-32,50,-31,-30,-29,]),'ADDASSIGN':([8,18,21,33,139,],[-71,-73,-72,70,-74,]),'ELSE':([1,2,7,13,30,61,91,119,120,122,123,124,126,127,133,134,137,142,145,146,148,150,],[-14,-13,-12,-11,-6,-5,-68,-64,-18,-16,-20,-17,-19,-62,141,-63,-15,-67,-61,-57,149,-59,]),'DOTSUB':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[43,-27,-25,-28,-29,-26,-28,43,-38,-39,43,43,-29,43,-24,43,-33,43,-34,-35,-36,-21,-22,43,43,43,43,-23,-37,-29,-40,43,43,43,43,43,-32,43,-31,-30,-29,]),'SUBASSIGN':([8,18,21,33,139,],[-71,-73,-72,72,-74,]),'STRING':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[11,-14,-13,11,11,11,-12,-11,-4,11,11,11,-6,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-5,11,11,11,11,11,11,11,11,-68,-75,-76,11,11,-64,-18,-16,-20,-17,11,-19,-62,-58,-63,-66,11,-15,11,11,11,-67,-65,-61,-57,11,-60,11,-59,]),'INTNUM':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,57,58,61,62,63,64,66,68,69,70,71,72,90,91,92,94,95,108,111,113,119,120,122,123,124,125,126,127,132,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[12,-14,-13,12,12,12,-12,-11,-4,12,12,12,-6,-3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,89,12,94,-5,12,98,99,12,12,12,12,12,12,12,-68,-75,-76,94,12,94,12,-64,-18,-16,-20,-17,12,-19,-62,94,-58,-63,-66,12,-15,12,12,12,-67,-65,-61,-57,12,-60,12,-59,]),';':([6,10,11,12,18,20,23,24,27,29,35,36,37,46,55,56,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,100,103,104,105,106,107,109,110,114,115,118,121,128,130,],[-10,-8,-27,-25,-28,-29,-9,61,-26,-7,-28,-70,-38,-39,-69,-56,-24,-45,-33,-44,-34,-35,-36,-21,-22,-41,-43,-42,-46,-23,-37,-40,-50,-51,-48,-47,-49,-32,-55,-31,-30,-78,134,137,-77,]),'/':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[53,-27,-25,-28,-29,-26,-28,53,-38,-39,53,53,-29,53,-24,53,53,53,53,-35,-36,53,53,53,53,53,53,-23,-37,-29,-40,53,53,53,53,53,-32,53,-31,-30,-29,]),'GTE':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[49,-27,-25,-28,-29,-26,-28,49,-38,-39,49,49,-29,49,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,49,49,49,49,49,-32,49,-31,-30,-29,]),'PRINT':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[16,-14,-13,16,-12,-11,-4,16,-6,-3,16,-5,-68,-75,-76,16,16,-64,-18,-16,-20,-17,16,-19,-62,-58,-63,-66,16,-15,16,16,-67,-65,-61,-57,16,-60,16,-59,]),'{':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[17,-14,-13,17,-12,-11,-4,17,-6,-3,17,-5,-68,-75,-76,125,17,-64,-18,-16,-20,-17,125,-19,-62,-58,-63,-66,125,-15,125,17,-67,-65,-61,-57,125,-60,125,-59,]),'GT':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[40,-27,-25,-28,-29,-26,-28,40,-38,-39,40,40,-29,40,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,40,40,40,40,40,-32,40,-31,-30,-29,]),'FOR':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[19,-14,-13,19,-12,-11,-4,19,-6,-3,19,-5,-68,-75,-76,19,19,-64,-18,-16,-20,-17,19,-19,-62,-58,-63,-66,19,-15,19,19,-67,-65,-61,-57,19,-60,19,-59,]),'DOTDIV':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[44,-27,-25,-28,-29,-26,-28,44,-38,-39,44,44,-29,44,-24,44,44,44,44,-35,-36,44,44,44,44,44,44,-23,-37,-29,-40,44,44,44,44,44,-32,44,-31,-30,-29,]),'(':([0,1,2,3,4,5,7,9,13,14,15,16,17,22,25,28,30,31,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,129,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[22,-14,-13,22,22,22,-12,38,-11,54,-4,22,22,22,62,63,-6,64,-3,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-5,22,22,22,22,22,22,22,22,-68,-75,-76,22,22,-64,-18,-16,-20,-17,22,-19,-62,138,-58,-63,-66,22,-15,22,22,22,-67,-65,-61,-57,22,-60,22,-59,]),'ZEROS':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[31,-14,-13,31,31,31,-12,-11,-4,31,31,31,-6,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-5,31,31,31,31,31,31,31,31,-68,-75,-76,31,31,-64,-18,-16,-20,-17,31,-19,-62,-58,-63,-66,31,-15,31,31,31,-67,-65,-61,-57,31,-60,31,-59,]),'=':([8,18,21,33,59,139,],[-71,-73,-72,71,95,-74,]),'LT':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[52,-27,-25,-28,-29,-26,-28,52,-38,-39,52,52,-29,52,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,52,52,52,52,52,-32,52,-31,-30,-29,]),'IF':([0,1,2,3,7,13,15,17,30,34,57,61,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,140,141,142,143,145,146,147,148,149,150,],[25,-14,-13,25,-12,-11,-4,25,-6,-3,25,-5,-68,-75,-76,129,25,-64,-18,-16,-20,-17,129,-19,-62,-58,-63,-66,129,-15,129,25,-67,-65,-61,-57,129,-60,129,-59,]),'BREAK':([92,94,108,119,120,122,123,124,125,126,127,134,135,136,137,140,142,143,145,147,148,149,150,],[-75,-76,130,-64,-18,-16,-20,-17,130,-19,-62,-63,-66,130,-15,130,-67,-65,-61,130,-60,130,-59,]),'*':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[39,-27,-25,-28,-29,-26,-28,39,-38,-39,39,39,-29,39,-24,39,39,39,39,-35,-36,39,39,39,39,39,39,-23,-37,-29,-40,39,39,39,39,39,-32,39,-31,-30,-29,]),',':([11,12,20,27,35,37,46,55,56,65,67,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,96,100,102,109,110,114,115,116,117,],[-27,-25,-29,-26,-28,-38,-39,90,-56,101,-53,-24,-45,-33,-44,-34,-35,-36,-21,-22,-41,-43,-42,-46,-23,-75,111,-76,-37,-40,90,-32,-55,-31,-30,-52,-54,]),'DIVASSIGN':([8,18,21,33,139,],[-71,-73,-72,69,-74,]),'FLOATNUM':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[27,-14,-13,27,27,27,-12,-11,-4,27,27,27,-6,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-5,27,27,27,27,27,27,27,27,-68,-75,-76,27,27,-64,-18,-16,-20,-17,27,-19,-62,-58,-63,-66,27,-15,27,27,27,-67,-65,-61,-57,27,-60,27,-59,]),'DOTMUL':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[45,-27,-25,-28,-29,-26,-28,45,-38,-39,45,45,-29,45,-24,45,45,45,45,-35,-36,45,45,45,45,45,45,-23,-37,-29,-40,45,45,45,45,45,-32,45,-31,-30,-29,]),"'":([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[46,-27,-25,-28,-29,-26,-28,46,46,-39,46,46,-29,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-37,-29,-40,46,46,46,46,46,-32,46,-31,-30,-29,]),'ONES':([0,1,2,3,4,5,7,13,15,16,17,22,30,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[28,-14,-13,28,28,28,-12,-11,-4,28,28,28,-6,-3,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-5,28,28,28,28,28,28,28,28,-68,-75,-76,28,28,-64,-18,-16,-20,-17,28,-19,-62,-58,-63,-66,28,-15,28,28,28,-67,-65,-61,-57,28,-60,28,-59,]),'+':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[47,-27,-25,-28,-29,-26,-28,47,-38,-39,47,47,-29,47,-24,47,-33,47,-34,-35,-36,-21,-22,47,47,47,47,-23,-37,-29,-40,47,47,47,47,47,-32,47,-31,-30,-29,]),']':([11,12,20,27,35,37,46,56,65,67,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,100,102,109,110,114,115,116,117,131,],[-27,-25,-29,-26,-28,-38,-39,-56,100,-53,-24,-45,-33,-44,-34,-35,-36,-21,-22,-41,-43,-42,-46,-23,-75,-76,-37,-40,117,-32,-55,-31,-30,-52,-54,139,]),'LTE':([10,11,12,18,20,27,35,36,37,46,56,60,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,100,103,104,105,106,107,109,110,114,115,144,],[51,-27,-25,-28,-29,-26,-28,51,-38,-39,51,51,-29,51,-24,None,-33,None,-34,-35,-36,-21,-22,None,None,None,None,-23,-37,-29,-40,51,51,51,51,51,-32,51,-31,-30,-29,]),'[':([0,1,2,3,4,5,7,13,15,16,17,18,22,30,32,34,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,61,62,66,68,69,70,71,72,90,91,92,94,101,108,113,119,120,122,123,124,125,126,127,133,134,135,136,137,138,140,141,142,143,145,146,147,148,149,150,],[32,-14,-13,32,32,32,-12,-11,-4,32,32,58,32,-6,66,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-5,32,32,32,32,32,32,32,32,-68,-75,-76,66,32,32,-64,-18,-16,-20,-17,32,-19,-62,-58,-63,-66,32,-15,32,32,32,-67,-65,-61,-57,32,-60,32,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inside_loop':([108,125,136,140,147,149,],[127,135,143,145,148,150,]),'instr_rec':([0,17,],[3,57,]),'block':([0,3,17,57,113,141,],[2,2,2,2,2,2,]),'cells':([16,66,],[55,102,]),'expr_rel':([0,3,4,5,16,17,22,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,62,66,68,69,70,71,72,90,108,113,125,136,138,140,141,147,149,],[20,20,20,20,20,20,20,73,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,97,20,20,20,20,20,20,20,20,20,20,20,144,20,20,20,20,]),'block_loop':([108,125,136,140,147,149,],[126,126,126,126,126,126,]),'print':([0,3,17,57,108,113,125,136,140,141,147,149,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'return':([0,3,17,57,108,113,125,136,140,141,147,149,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'while':([0,3,17,57,108,113,125,136,140,141,147,149,],[7,7,7,7,120,7,120,120,120,7,120,120,]),'instr_inside_loop':([108,125,136,140,147,149,],[119,119,119,119,119,119,]),'rows':([32,],[65,]),'index':([58,95,111,132,],[93,112,131,140,]),'instr_colon':([0,3,17,57,108,113,125,136,140,141,147,149,],[24,24,24,24,128,24,128,128,128,24,128,128,]),'id_2':([0,3,17,57,108,113,125,136,140,141,147,149,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'break_continue':([108,125,136,140,147,149,],[121,121,121,121,121,121,]),'inside_loop_rec':([125,],[136,]),'instr_coloff_inside_loop':([108,125,136,140,147,149,],[122,122,122,122,122,122,]),'program':([0,],[26,]),'if':([0,3,17,57,113,141,],[1,1,1,1,1,1,]),'row':([32,101,],[67,116,]),'expr':([0,3,4,5,16,17,22,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,57,62,66,68,69,70,71,72,90,108,113,125,136,138,140,141,147,149,],[10,10,36,37,56,10,60,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,10,74,56,103,104,105,106,107,110,10,10,10,10,74,10,10,10,10,]),'if_inside_loop':([108,125,136,140,147,149,],[123,123,123,123,123,123,]),'for':([0,3,17,57,108,113,125,136,140,141,147,149,],[13,13,13,13,124,13,124,124,124,13,124,124,]),'assign':([0,3,17,57,108,113,125,136,140,141,147,149,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'ref':([0,3,17,57,108,113,125,136,140,141,147,149,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'instr_coloff':([0,3,17,57,113,141,],[30,30,30,30,30,30,]),'instr':([0,3,17,57,113,141,],[15,34,15,34,133,146,]),'id':([0,3,17,57,108,113,125,136,140,141,147,149,],[33,33,33,33,33,33,33,33,33,33,33,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instr_rec','program',1,'p_program','Mparser.py',24),
  ('program -> <empty>','program',0,'p_program','Mparser.py',25),
  ('instr_rec -> instr_rec instr','instr_rec',2,'p_instr_rec','Mparser.py',29),
  ('instr_rec -> instr','instr_rec',1,'p_instr_rec','Mparser.py',30),
  ('instr -> instr_colon ;','instr',2,'p_instr','Mparser.py',37),
  ('instr -> instr_coloff','instr',1,'p_instr','Mparser.py',38),
  ('instr_colon -> assign','instr_colon',1,'p_instr_colon','Mparser.py',42),
  ('instr_colon -> expr','instr_colon',1,'p_instr_colon','Mparser.py',43),
  ('instr_colon -> print','instr_colon',1,'p_instr_colon','Mparser.py',44),
  ('instr_colon -> return','instr_colon',1,'p_instr_colon','Mparser.py',45),
  ('instr_coloff -> for','instr_coloff',1,'p_instr_coloff','Mparser.py',49),
  ('instr_coloff -> while','instr_coloff',1,'p_instr_coloff','Mparser.py',50),
  ('instr_coloff -> block','instr_coloff',1,'p_instr_coloff','Mparser.py',51),
  ('instr_coloff -> if','instr_coloff',1,'p_instr_coloff','Mparser.py',52),
  ('instr_inside_loop -> instr_colon ;','instr_inside_loop',2,'p_instr_inside_loop','Mparser.py',56),
  ('instr_inside_loop -> instr_coloff_inside_loop','instr_inside_loop',1,'p_instr_inside_loop','Mparser.py',57),
  ('instr_coloff_inside_loop -> for','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',61),
  ('instr_coloff_inside_loop -> while','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',62),
  ('instr_coloff_inside_loop -> block_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',63),
  ('instr_coloff_inside_loop -> if_inside_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',64),
  ('expr -> expr + expr','expr',3,'p_expr_1','Mparser.py',70),
  ('expr -> expr - expr','expr',3,'p_expr_1','Mparser.py',71),
  ('expr -> expr / expr','expr',3,'p_expr_1','Mparser.py',72),
  ('expr -> expr * expr','expr',3,'p_expr_1','Mparser.py',73),
  ('expr -> INTNUM','expr',1,'p_expr_2','Mparser.py',77),
  ('expr -> FLOATNUM','expr',1,'p_expr_2','Mparser.py',78),
  ('expr -> STRING','expr',1,'p_expr_2','Mparser.py',79),
  ('expr -> ID','expr',1,'p_expr_2','Mparser.py',80),
  ('expr -> expr_rel','expr',1,'p_expr_2','Mparser.py',81),
  ('expr -> ZEROS ( INTNUM )','expr',4,'p_expr_3','Mparser.py',86),
  ('expr -> ONES ( INTNUM )','expr',4,'p_expr_3','Mparser.py',87),
  ('expr -> EYE ( INTNUM )','expr',4,'p_expr_3','Mparser.py',88),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_4','Mparser.py',92),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_4','Mparser.py',93),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_4','Mparser.py',94),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_4','Mparser.py',95),
  ('expr -> ( expr )','expr',3,'p_expr_5','Mparser.py',99),
  ('expr -> - expr','expr',2,'p_expr_6','Mparser.py',103),
  ("expr -> expr '",'expr',2,'p_expr_7','Mparser.py',107),
  ('expr -> [ rows ]','expr',3,'p_expr_8','Mparser.py',111),
  ('expr_rel -> expr GTE expr','expr_rel',3,'p_expr_rel','Mparser.py',115),
  ('expr_rel -> expr LTE expr','expr_rel',3,'p_expr_rel','Mparser.py',116),
  ('expr_rel -> expr NEQ expr','expr_rel',3,'p_expr_rel','Mparser.py',117),
  ('expr_rel -> expr EQ expr','expr_rel',3,'p_expr_rel','Mparser.py',118),
  ('expr_rel -> expr GT expr','expr_rel',3,'p_expr_rel','Mparser.py',119),
  ('expr_rel -> expr LT expr','expr_rel',3,'p_expr_rel','Mparser.py',120),
  ('assign -> id = expr','assign',3,'p_assign','Mparser.py',124),
  ('assign -> id ADDASSIGN expr','assign',3,'p_assign','Mparser.py',125),
  ('assign -> id SUBASSIGN expr','assign',3,'p_assign','Mparser.py',126),
  ('assign -> id MULASSIGN expr','assign',3,'p_assign','Mparser.py',127),
  ('assign -> id DIVASSIGN expr','assign',3,'p_assign','Mparser.py',128),
  ('rows -> rows , row','rows',3,'p_rows','Mparser.py',132),
  ('rows -> row','rows',1,'p_rows','Mparser.py',133),
  ('row -> [ cells ]','row',3,'p_row','Mparser.py',140),
  ('cells -> cells , expr','cells',3,'p_cells','Mparser.py',144),
  ('cells -> expr','cells',1,'p_cells','Mparser.py',145),
  ('if -> IF ( expr_rel ) instr ELSE instr','if',7,'p_if','Mparser.py',154),
  ('if -> IF ( expr_rel ) instr','if',5,'p_if','Mparser.py',155),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop ELSE inside_loop','if_inside_loop',7,'p_if_inside_loop','Mparser.py',162),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop','if_inside_loop',5,'p_if_inside_loop','Mparser.py',163),
  ('for -> FOR ID = index : index inside_loop','for',7,'p_for','Mparser.py',170),
  ('while -> WHILE ( expr_rel ) inside_loop','while',5,'p_while','Mparser.py',174),
  ('inside_loop -> break_continue ;','inside_loop',2,'p_inside_loop','Mparser.py',178),
  ('inside_loop -> instr_inside_loop','inside_loop',1,'p_inside_loop','Mparser.py',179),
  ('inside_loop_rec -> inside_loop_rec inside_loop','inside_loop_rec',2,'p_inside_loop_rec','Mparser.py',183),
  ('inside_loop_rec -> inside_loop','inside_loop_rec',1,'p_inside_loop_rec','Mparser.py',184),
  ('block_loop -> { inside_loop_rec }','block_loop',3,'p_block_loop','Mparser.py',191),
  ('block -> { instr_rec }','block',3,'p_block','Mparser.py',195),
  ('print -> PRINT cells','print',2,'p_print','Mparser.py',201),
  ('return -> RETURN expr','return',2,'p_return','Mparser.py',205),
  ('id -> id_2','id',1,'p_id','Mparser.py',209),
  ('id -> ref','id',1,'p_id','Mparser.py',210),
  ('id_2 -> ID','id_2',1,'p_id_2','Mparser.py',214),
  ('ref -> ID [ index , index ]','ref',6,'p_ref','Mparser.py',218),
  ('index -> ID','index',1,'p_index','Mparser.py',222),
  ('index -> INTNUM','index',1,'p_index','Mparser.py',223),
  ('break_continue -> BREAK','break_continue',1,'p_break_continue','Mparser.py',230),
  ('break_continue -> CONTINUE','break_continue',1,'p_break_continue','Mparser.py',231),
]
