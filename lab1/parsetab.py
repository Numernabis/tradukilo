
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instr_rec\n               | instr_rec : instr_rec instr\n                 | instrinstr : instr_colon ';'\n             | instr_coloffinstr_colon : assign\n                   | expr\n                   | print\n                   | returninstr_coloff : for\n                    | while\n                    | block\n                    | ifinstr_inside_loop : instr_colon ';'\n                         | instr_coloff_inside_loopinstr_coloff_inside_loop : for\n                                | while\n                                | block_loop\n                                | if_inside_loopexpr : expr '+' expr\n            | expr '-' expr\n            | expr '/' expr\n            | expr '*' exprexpr : INTNUM\n            | FLOATNUM\n            | STRING\n            | IDexpr : ZEROS '(' INTNUM ')'\n            | ONES '(' INTNUM ')'\n            | EYE '(' INTNUM ')'expr : expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTDIV expr\n            | expr DOTMUL exprexpr : '-' expr\n            | '(' expr ')'\n            | expr '\\'' expr : '[' rows ']'expr_rel : expr GTE expr\n                | expr LTE expr\n                | expr NEQ expr\n                | expr EQ expr\n                | expr GT expr\n                | expr LT exprrows : rows ',' row\n            | rowrow : '[' cells ']'if : IF '(' expr_rel ')' instr\n          | IF '(' expr_rel ')' instr ELSE instrif_inside_loop : IF '(' expr_rel ')' inside_loop\n                      | IF '(' expr_rel ')' inside_loop ELSE inside_loopfor : FOR ID '=' id_or_intnum ':' id_or_intnum inside_loopwhile : WHILE '(' expr_rel ')' inside_loopinside_loop : break_continue ';'\n                   | instr_inside_loopblock_loop : '{' inside_loop_rec '}'inside_loop_rec : inside_loop_rec inside_loop\n                       | inside_loopprint : PRINT cellsblock : '{' instr_rec '}'assign : id '=' expr\n              | id ADDASSIGN expr\n              | id SUBASSIGN expr\n              | id MULASSIGN expr\n              | id DIVASSIGN exprcells : cells ',' expr\n             | exprreturn : RETURN exprid : ID\n          | cellcell : ID '[' index ',' index ']'index : ID\n             | INTNUMid_or_intnum : INTNUM\n                    | IDbreak_continue : BREAK\n                      | CONTINUE"
    
_lr_action_items = {'$end':([0,1,2,3,5,10,11,12,13,32,33,92,114,116,120,121,122,123,124,133,136,137,142,143,146,148,150,],[-2,0,-1,-4,-6,-11,-12,-13,-14,-3,-5,-61,-54,-56,-16,-17,-18,-19,-20,-49,-55,-15,-53,-57,-50,-51,-52,]),'INTNUM':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,50,51,53,54,55,62,63,64,88,89,92,94,101,103,104,105,106,107,108,109,110,111,113,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[16,16,-4,-6,-11,-12,-13,-14,16,16,16,16,16,-3,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,80,81,83,84,16,16,16,16,16,103,-61,80,-76,-75,16,16,16,16,16,16,16,16,103,-54,-56,-16,-17,-18,-19,-20,16,-49,16,-55,-15,16,-59,16,16,-53,-57,-58,-50,16,-51,16,-52,]),'FLOATNUM':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[17,17,-4,-6,-11,-12,-13,-14,17,17,17,17,17,-3,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-61,-76,-75,17,17,17,17,17,17,17,17,-54,-56,-16,-17,-18,-19,-20,17,-49,17,-55,-15,17,-59,17,17,-53,-57,-58,-50,17,-51,17,-52,]),'STRING':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[18,18,-4,-6,-11,-12,-13,-14,18,18,18,18,18,-3,-5,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-61,-76,-75,18,18,18,18,18,18,18,18,-54,-56,-16,-17,-18,-19,-20,18,-49,18,-55,-15,18,-59,18,18,-53,-57,-58,-50,18,-51,18,-52,]),'ID':([0,2,3,5,10,11,12,13,15,21,25,26,27,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,50,55,62,63,64,88,89,92,94,101,103,104,105,106,107,108,109,110,111,113,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[19,19,-4,-6,-11,-12,-13,-14,49,49,49,49,61,19,-3,-5,49,49,49,49,49,49,49,49,49,49,49,49,49,78,49,49,19,49,49,101,-61,78,-76,-75,19,49,49,49,49,49,49,19,101,-54,-56,-16,-17,-18,-19,-20,19,-49,19,-55,-15,19,-59,49,19,-53,-57,-58,-50,19,-51,19,-52,]),'ZEROS':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[20,20,-4,-6,-11,-12,-13,-14,20,20,20,20,20,-3,-5,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-61,-76,-75,20,20,20,20,20,20,20,20,-54,-56,-16,-17,-18,-19,-20,20,-49,20,-55,-15,20,-59,20,20,-53,-57,-58,-50,20,-51,20,-52,]),'ONES':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[22,22,-4,-6,-11,-12,-13,-14,22,22,22,22,22,-3,-5,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-61,-76,-75,22,22,22,22,22,22,22,22,-54,-56,-16,-17,-18,-19,-20,22,-49,22,-55,-15,22,-59,22,22,-53,-57,-58,-50,22,-51,22,-52,]),'EYE':([0,2,3,5,10,11,12,13,15,21,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[23,23,-4,-6,-11,-12,-13,-14,23,23,23,23,23,-3,-5,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-61,-76,-75,23,23,23,23,23,23,23,23,-54,-56,-16,-17,-18,-19,-20,23,-49,23,-55,-15,23,-59,23,23,-53,-57,-58,-50,23,-51,23,-52,]),'-':([0,2,3,5,7,10,11,12,13,15,16,17,18,19,21,25,26,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,55,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,88,91,92,95,96,97,100,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[15,15,-4,-6,35,-11,-12,-13,-14,15,-25,-26,-27,-28,15,15,15,15,-3,-5,15,15,15,15,15,15,15,15,-38,15,15,15,15,15,-36,-28,35,15,35,35,15,15,15,-21,-22,35,35,35,35,35,35,35,35,35,35,35,-37,-39,15,35,-61,-29,-30,-31,35,-76,-75,15,15,15,15,15,15,15,15,-54,-56,-16,-17,-18,-19,-20,15,35,35,35,35,35,35,-49,15,-55,-15,15,-59,15,15,-53,-57,-58,-50,15,-51,15,-52,]),'(':([0,2,3,5,10,11,12,13,15,20,21,22,23,25,26,28,29,30,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,126,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[21,21,-4,-6,-11,-12,-13,-14,21,51,21,53,54,21,21,62,21,64,-3,-5,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-61,-76,-75,21,21,21,21,21,21,21,21,-54,-56,-16,-17,-18,-19,-20,21,140,-49,21,-55,-15,21,-59,21,21,-53,-57,-58,-50,21,-51,21,-52,]),'[':([0,2,3,5,10,11,12,13,15,19,21,24,25,26,29,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,87,88,92,101,103,104,105,106,107,108,109,110,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,],[24,24,-4,-6,-11,-12,-13,-14,24,50,24,55,24,24,24,-3,-5,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,55,24,-61,-76,-75,24,24,24,24,24,24,24,24,-54,-56,-16,-17,-18,-19,-20,24,-49,24,-55,-15,24,-59,24,24,-53,-57,-58,-50,24,-51,24,-52,]),'PRINT':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[25,25,-4,-6,-11,-12,-13,-14,25,-3,-5,25,-61,-76,-75,25,25,-54,-56,-16,-17,-18,-19,-20,25,-49,25,-55,-15,25,-59,25,-53,-57,-58,-50,25,-51,25,-52,]),'RETURN':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[26,26,-4,-6,-11,-12,-13,-14,26,-3,-5,26,-61,-76,-75,26,26,-54,-56,-16,-17,-18,-19,-20,26,-49,26,-55,-15,26,-59,26,-53,-57,-58,-50,26,-51,26,-52,]),'FOR':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[27,27,-4,-6,-11,-12,-13,-14,27,-3,-5,27,-61,-76,-75,27,27,-54,-56,-16,-17,-18,-19,-20,27,-49,27,-55,-15,27,-59,27,-53,-57,-58,-50,27,-51,27,-52,]),'WHILE':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[28,28,-4,-6,-11,-12,-13,-14,28,-3,-5,28,-61,-76,-75,28,28,-54,-56,-16,-17,-18,-19,-20,28,-49,28,-55,-15,28,-59,28,-53,-57,-58,-50,28,-51,28,-52,]),'{':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[29,29,-4,-6,-11,-12,-13,-14,29,-3,-5,29,-61,-76,-75,125,29,-54,-56,-16,-17,-18,-19,-20,125,-49,125,-55,-15,125,-59,29,-53,-57,-58,-50,125,-51,125,-52,]),'IF':([0,2,3,5,10,11,12,13,29,32,33,63,92,101,103,104,111,114,116,120,121,122,123,124,125,133,135,136,137,138,139,141,142,143,144,146,147,148,149,150,],[30,30,-4,-6,-11,-12,-13,-14,30,-3,-5,30,-61,-76,-75,126,30,-54,-56,-16,-17,-18,-19,-20,126,-49,126,-55,-15,126,-59,30,-53,-57,-58,-50,126,-51,126,-52,]),'}':([3,5,10,11,12,13,32,33,63,92,114,116,120,121,122,123,124,133,136,137,138,139,142,143,144,146,148,150,],[-4,-6,-11,-12,-13,-14,-3,-5,92,-61,-54,-56,-16,-17,-18,-19,-20,-49,-55,-15,143,-59,-53,-57,-58,-50,-51,-52,]),';':([4,6,7,8,9,16,17,18,19,42,48,49,58,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,95,96,97,100,115,117,118,119,],[33,-7,-8,-9,-10,-25,-26,-27,-28,-38,-36,-28,-60,-68,-69,-21,-22,-23,-24,-32,-33,-34,-35,-62,-63,-64,-65,-66,-37,-39,-29,-30,-31,-67,136,-77,-78,137,]),'ELSE':([5,10,11,12,13,33,92,114,116,120,121,122,123,124,133,136,137,142,143,146,148,150,],[-6,-11,-12,-13,-14,-5,-61,-54,-56,-16,-17,-18,-19,-20,141,-55,-15,-53,-57,-50,149,-52,]),'+':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[34,-25,-26,-27,-28,-38,-36,-28,34,34,34,-21,-22,34,34,34,34,34,34,34,34,34,34,34,-37,-39,34,-29,-30,-31,34,34,34,34,34,34,34,]),'/':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[36,-25,-26,-27,-28,-38,-36,-28,36,36,36,-21,-22,36,36,36,36,36,36,36,36,36,36,36,-37,-39,36,-29,-30,-31,36,36,36,36,36,36,36,]),'*':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[37,-25,-26,-27,-28,-38,-36,-28,37,37,37,-21,-22,37,37,37,37,37,37,37,37,37,37,37,-37,-39,37,-29,-30,-31,37,37,37,37,37,37,37,]),'DOTADD':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[38,-25,-26,-27,-28,-38,-36,-28,38,38,38,-21,-22,38,38,38,38,38,38,38,38,38,38,38,-37,-39,38,-29,-30,-31,38,38,38,38,38,38,38,]),'DOTSUB':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[39,-25,-26,-27,-28,-38,-36,-28,39,39,39,-21,-22,39,39,39,39,39,39,39,39,39,39,39,-37,-39,39,-29,-30,-31,39,39,39,39,39,39,39,]),'DOTDIV':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[40,-25,-26,-27,-28,-38,-36,-28,40,40,40,-21,-22,40,40,40,40,40,40,40,40,40,40,40,-37,-39,40,-29,-30,-31,40,40,40,40,40,40,40,]),'DOTMUL':([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[41,-25,-26,-27,-28,-38,-36,-28,41,41,41,-21,-22,41,41,41,41,41,41,41,41,41,41,41,-37,-39,41,-29,-30,-31,41,41,41,41,41,41,41,]),"'":([7,16,17,18,19,42,48,49,52,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,82,86,91,95,96,97,100,127,128,129,130,131,132,],[42,-25,-26,-27,-28,-38,-36,-28,42,42,42,-21,-22,42,42,42,42,42,42,42,42,42,42,42,-37,-39,42,-29,-30,-31,42,42,42,42,42,42,42,]),'=':([14,19,31,61,134,],[43,-70,-71,89,-72,]),'ADDASSIGN':([14,19,31,134,],[44,-70,-71,-72,]),'SUBASSIGN':([14,19,31,134,],[45,-70,-71,-72,]),'MULASSIGN':([14,19,31,134,],[46,-70,-71,-72,]),'DIVASSIGN':([14,19,31,134,],[47,-70,-71,-72,]),')':([16,17,18,42,48,49,52,65,66,67,68,69,70,71,72,81,82,83,84,86,90,93,95,96,97,127,128,129,130,131,132,145,],[-25,-26,-27,-38,-36,-28,82,-21,-22,-23,-24,-32,-33,-34,-35,95,-37,96,97,-39,104,111,-29,-30,-31,-40,-41,-42,-43,-44,-45,147,]),',':([16,17,18,42,48,49,56,57,58,59,65,66,67,68,69,70,71,72,78,79,80,82,85,86,95,96,97,98,99,100,],[-25,-26,-27,-38,-36,-28,87,-47,88,-68,-21,-22,-23,-24,-32,-33,-34,-35,-73,94,-74,-37,88,-39,-29,-30,-31,-48,-46,-67,]),']':([16,17,18,42,48,49,56,57,59,65,66,67,68,69,70,71,72,78,80,82,85,86,95,96,97,98,99,100,112,],[-25,-26,-27,-38,-36,-28,86,-47,-68,-21,-22,-23,-24,-32,-33,-34,-35,-73,-74,-37,98,-39,-29,-30,-31,-48,-46,-67,134,]),'GTE':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,105,-29,-30,-31,]),'LTE':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,106,-29,-30,-31,]),'NEQ':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,107,-29,-30,-31,]),'EQ':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,108,-29,-30,-31,]),'GT':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,109,-29,-30,-31,]),'LT':([16,17,18,42,48,49,65,66,67,68,69,70,71,72,82,86,91,95,96,97,],[-25,-26,-27,-38,-36,-28,-21,-22,-23,-24,-32,-33,-34,-35,-37,-39,110,-29,-30,-31,]),':':([101,102,103,],[-76,113,-75,]),'BREAK':([101,103,104,114,116,120,121,122,123,124,125,135,136,137,138,139,142,143,144,147,148,149,150,],[-76,-75,117,-54,-56,-16,-17,-18,-19,-20,117,117,-55,-15,117,-59,-53,-57,-58,117,-51,117,-52,]),'CONTINUE':([101,103,104,114,116,120,121,122,123,124,125,135,136,137,138,139,142,143,144,147,148,149,150,],[-76,-75,118,-54,-56,-16,-17,-18,-19,-20,118,118,-55,-15,118,-59,-53,-57,-58,118,-51,118,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instr_rec':([0,29,],[2,63,]),'instr':([0,2,29,63,111,141,],[3,32,3,32,133,146,]),'instr_colon':([0,2,29,63,104,111,125,135,138,141,147,149,],[4,4,4,4,119,4,119,119,119,4,119,119,]),'instr_coloff':([0,2,29,63,111,141,],[5,5,5,5,5,5,]),'assign':([0,2,29,63,104,111,125,135,138,141,147,149,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'expr':([0,2,15,21,25,26,29,34,35,36,37,38,39,40,41,43,44,45,46,47,55,62,63,64,88,104,105,106,107,108,109,110,111,125,135,138,140,141,147,149,],[7,7,48,52,59,60,7,65,66,67,68,69,70,71,72,73,74,75,76,77,59,91,7,91,100,7,127,128,129,130,131,132,7,7,7,7,91,7,7,7,]),'print':([0,2,29,63,104,111,125,135,138,141,147,149,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'return':([0,2,29,63,104,111,125,135,138,141,147,149,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'for':([0,2,29,63,104,111,125,135,138,141,147,149,],[10,10,10,10,121,10,121,121,121,10,121,121,]),'while':([0,2,29,63,104,111,125,135,138,141,147,149,],[11,11,11,11,122,11,122,122,122,11,122,122,]),'block':([0,2,29,63,111,141,],[12,12,12,12,12,12,]),'if':([0,2,29,63,111,141,],[13,13,13,13,13,13,]),'id':([0,2,29,63,104,111,125,135,138,141,147,149,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'cell':([0,2,29,63,104,111,125,135,138,141,147,149,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'rows':([24,],[56,]),'row':([24,87,],[57,99,]),'cells':([25,55,],[58,85,]),'index':([50,94,],[79,112,]),'expr_rel':([62,64,140,],[90,93,145,]),'id_or_intnum':([89,113,],[102,135,]),'inside_loop':([104,125,135,138,147,149,],[114,139,142,144,148,150,]),'break_continue':([104,125,135,138,147,149,],[115,115,115,115,115,115,]),'instr_inside_loop':([104,125,135,138,147,149,],[116,116,116,116,116,116,]),'instr_coloff_inside_loop':([104,125,135,138,147,149,],[120,120,120,120,120,120,]),'block_loop':([104,125,135,138,147,149,],[123,123,123,123,123,123,]),'if_inside_loop':([104,125,135,138,147,149,],[124,124,124,124,124,124,]),'inside_loop_rec':([125,],[138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instr_rec','program',1,'p_program','Mparser.py',23),
  ('program -> <empty>','program',0,'p_program','Mparser.py',24),
  ('instr_rec -> instr_rec instr','instr_rec',2,'p_instr_rec','Mparser.py',27),
  ('instr_rec -> instr','instr_rec',1,'p_instr_rec','Mparser.py',28),
  ('instr -> instr_colon ;','instr',2,'p_instr','Mparser.py',31),
  ('instr -> instr_coloff','instr',1,'p_instr','Mparser.py',32),
  ('instr_colon -> assign','instr_colon',1,'p_instr_colon','Mparser.py',35),
  ('instr_colon -> expr','instr_colon',1,'p_instr_colon','Mparser.py',36),
  ('instr_colon -> print','instr_colon',1,'p_instr_colon','Mparser.py',37),
  ('instr_colon -> return','instr_colon',1,'p_instr_colon','Mparser.py',38),
  ('instr_coloff -> for','instr_coloff',1,'p_instr_coloff','Mparser.py',41),
  ('instr_coloff -> while','instr_coloff',1,'p_instr_coloff','Mparser.py',42),
  ('instr_coloff -> block','instr_coloff',1,'p_instr_coloff','Mparser.py',43),
  ('instr_coloff -> if','instr_coloff',1,'p_instr_coloff','Mparser.py',44),
  ('instr_inside_loop -> instr_colon ;','instr_inside_loop',2,'p_instr_inside_loop','Mparser.py',47),
  ('instr_inside_loop -> instr_coloff_inside_loop','instr_inside_loop',1,'p_instr_inside_loop','Mparser.py',48),
  ('instr_coloff_inside_loop -> for','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',51),
  ('instr_coloff_inside_loop -> while','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',52),
  ('instr_coloff_inside_loop -> block_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',53),
  ('instr_coloff_inside_loop -> if_inside_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',54),
  ('expr -> expr + expr','expr',3,'p_expr_1','Mparser.py',57),
  ('expr -> expr - expr','expr',3,'p_expr_1','Mparser.py',58),
  ('expr -> expr / expr','expr',3,'p_expr_1','Mparser.py',59),
  ('expr -> expr * expr','expr',3,'p_expr_1','Mparser.py',60),
  ('expr -> INTNUM','expr',1,'p_expr_2','Mparser.py',63),
  ('expr -> FLOATNUM','expr',1,'p_expr_2','Mparser.py',64),
  ('expr -> STRING','expr',1,'p_expr_2','Mparser.py',65),
  ('expr -> ID','expr',1,'p_expr_2','Mparser.py',66),
  ('expr -> ZEROS ( INTNUM )','expr',4,'p_expr_3','Mparser.py',69),
  ('expr -> ONES ( INTNUM )','expr',4,'p_expr_3','Mparser.py',70),
  ('expr -> EYE ( INTNUM )','expr',4,'p_expr_3','Mparser.py',71),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_4','Mparser.py',74),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_4','Mparser.py',75),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_4','Mparser.py',76),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_4','Mparser.py',77),
  ('expr -> - expr','expr',2,'p_expr_5','Mparser.py',81),
  ('expr -> ( expr )','expr',3,'p_expr_5','Mparser.py',82),
  ("expr -> expr '",'expr',2,'p_expr_5','Mparser.py',83),
  ('expr -> [ rows ]','expr',3,'p_expr_6','Mparser.py',86),
  ('expr_rel -> expr GTE expr','expr_rel',3,'p_expr_rel','Mparser.py',89),
  ('expr_rel -> expr LTE expr','expr_rel',3,'p_expr_rel','Mparser.py',90),
  ('expr_rel -> expr NEQ expr','expr_rel',3,'p_expr_rel','Mparser.py',91),
  ('expr_rel -> expr EQ expr','expr_rel',3,'p_expr_rel','Mparser.py',92),
  ('expr_rel -> expr GT expr','expr_rel',3,'p_expr_rel','Mparser.py',93),
  ('expr_rel -> expr LT expr','expr_rel',3,'p_expr_rel','Mparser.py',94),
  ('rows -> rows , row','rows',3,'p_rows','Mparser.py',97),
  ('rows -> row','rows',1,'p_rows','Mparser.py',98),
  ('row -> [ cells ]','row',3,'p_row','Mparser.py',101),
  ('if -> IF ( expr_rel ) instr','if',5,'p_if','Mparser.py',104),
  ('if -> IF ( expr_rel ) instr ELSE instr','if',7,'p_if','Mparser.py',105),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop','if_inside_loop',5,'p_if_inside_loop','Mparser.py',108),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop ELSE inside_loop','if_inside_loop',7,'p_if_inside_loop','Mparser.py',109),
  ('for -> FOR ID = id_or_intnum : id_or_intnum inside_loop','for',7,'p_for','Mparser.py',112),
  ('while -> WHILE ( expr_rel ) inside_loop','while',5,'p_while','Mparser.py',115),
  ('inside_loop -> break_continue ;','inside_loop',2,'p_inside_loop','Mparser.py',118),
  ('inside_loop -> instr_inside_loop','inside_loop',1,'p_inside_loop','Mparser.py',119),
  ('block_loop -> { inside_loop_rec }','block_loop',3,'p_block_loop','Mparser.py',122),
  ('inside_loop_rec -> inside_loop_rec inside_loop','inside_loop_rec',2,'p_inside_loop_rec','Mparser.py',125),
  ('inside_loop_rec -> inside_loop','inside_loop_rec',1,'p_inside_loop_rec','Mparser.py',126),
  ('print -> PRINT cells','print',2,'p_print','Mparser.py',129),
  ('block -> { instr_rec }','block',3,'p_block','Mparser.py',132),
  ('assign -> id = expr','assign',3,'p_assign','Mparser.py',135),
  ('assign -> id ADDASSIGN expr','assign',3,'p_assign','Mparser.py',136),
  ('assign -> id SUBASSIGN expr','assign',3,'p_assign','Mparser.py',137),
  ('assign -> id MULASSIGN expr','assign',3,'p_assign','Mparser.py',138),
  ('assign -> id DIVASSIGN expr','assign',3,'p_assign','Mparser.py',139),
  ('cells -> cells , expr','cells',3,'p_cells','Mparser.py',142),
  ('cells -> expr','cells',1,'p_cells','Mparser.py',143),
  ('return -> RETURN expr','return',2,'p_return','Mparser.py',146),
  ('id -> ID','id',1,'p_id','Mparser.py',149),
  ('id -> cell','id',1,'p_id','Mparser.py',150),
  ('cell -> ID [ index , index ]','cell',6,'p_cell','Mparser.py',153),
  ('index -> ID','index',1,'p_index','Mparser.py',156),
  ('index -> INTNUM','index',1,'p_index','Mparser.py',157),
  ('id_or_intnum -> INTNUM','id_or_intnum',1,'p_id_or_intnum','Mparser.py',161),
  ('id_or_intnum -> ID','id_or_intnum',1,'p_id_or_intnum','Mparser.py',162),
  ('break_continue -> BREAK','break_continue',1,'p_break_continue','Mparser.py',165),
  ('break_continue -> CONTINUE','break_continue',1,'p_break_continue','Mparser.py',166),
]
