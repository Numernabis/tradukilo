
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftIFleftELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassocGTELTENEQEQGTLTleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVrightUMINUSright'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instr_rec\n               | instr_rec : instr_rec instr\n                 | instrinstr : instr_colon ';'\n             | instr_coloffinstr_colon : assign\n                   | expr\n                   | print\n                   | returninstr_coloff : for\n                    | while\n                    | block\n                    | ifinstr_inside_loop : instr_colon ';'\n                         | instr_coloff_inside_loopinstr_coloff_inside_loop : for\n                                | while\n                                | block_loop\n                                | if_inside_loopexpr : INTNUMexpr : FLOATNUMexpr : STRINGexpr : idexpr : expr_relexpr : '(' expr ')'expr : '-' expr %prec UMINUSexpr : expr '\\''expr : '[' rows ']'expr : expr '+' expr\n            | expr '-' expr\n            | expr '/' expr\n            | expr '*' exprexpr : ZEROS '(' INTNUM ')'\n            | ONES '(' INTNUM ')'\n            | EYE '(' INTNUM ')'expr : expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTDIV expr\n            | expr DOTMUL exprexpr_rel : expr GTE expr\n                | expr LTE expr\n                | expr NEQ expr\n                | expr EQ expr\n                | expr GT expr\n                | expr LT exprassign : id '=' expr\n              | id ADDASSIGN expr\n              | id SUBASSIGN expr\n              | id MULASSIGN expr\n              | id DIVASSIGN exprrows : rows ',' row\n            | rowrow : '[' cells ']'cells : cells ',' expr\n             | exprif : IF '(' expr_rel ')' instr %prec IF\n          | IF '(' expr_rel ')' instr ELSE instrif_inside_loop : IF '(' expr_rel ')' inside_loop %prec IF\n                      | IF '(' expr_rel ')' inside_loop ELSE inside_loopfor : FOR ID '=' index ':' index inside_loopwhile : WHILE '(' expr_rel ')' inside_loopinside_loop : break_continue ';'\n                   | instr_inside_loopinside_loop_rec : inside_loop_rec inside_loop\n                       | inside_loopblock_loop : '{' inside_loop_rec '}'block : '{' instr_rec '}'print : PRINT cellsreturn : RETURN exprid : nonref\n          | refnonref : IDref : ID '[' index ',' index ']'index : IDindex : INTNUMbreak_continue : break\n                      | continuebreak : BREAKcontinue : CONTINUE"
    
_lr_action_items = {'$end':([0,1,2,3,5,10,11,12,13,34,35,106,120,122,126,129,130,131,132,135,138,139,144,145,148,150,152,],[-2,0,-1,-4,-6,-11,-12,-13,-14,-3,-5,-68,-62,-64,-16,-17,-18,-19,-20,-57,-63,-15,-61,-67,-58,-59,-60,]),'INTNUM':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,62,63,64,69,70,71,72,99,100,101,103,106,115,116,117,118,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[15,15,-4,-6,-11,-12,-13,-14,15,15,15,15,15,-3,-5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,96,97,98,103,15,15,15,15,103,-75,-76,-68,103,15,15,103,-62,-64,-16,-17,-18,-19,-20,15,-57,15,-63,-15,15,-66,15,15,-61,-67,-65,-58,15,-59,15,-60,]),'FLOATNUM':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[16,16,-4,-6,-11,-12,-13,-14,16,16,16,16,16,-3,-5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-75,-76,-68,16,16,-62,-64,-16,-17,-18,-19,-20,16,-57,16,-63,-15,16,-66,16,16,-61,-67,-65,-58,16,-59,16,-60,]),'STRING':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[17,17,-4,-6,-11,-12,-13,-14,17,17,17,17,17,-3,-5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-75,-76,-68,17,17,-62,-64,-16,-17,-18,-19,-20,17,-57,17,-63,-15,17,-66,17,17,-61,-67,-65,-58,17,-59,17,-60,]),'(':([0,2,3,5,10,11,12,13,19,20,22,23,24,25,26,29,30,31,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[19,19,-4,-6,-11,-12,-13,-14,19,19,62,63,64,19,19,70,19,72,-3,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-75,-76,-68,19,19,-62,-64,-16,-17,-18,-19,-20,19,142,-57,19,-63,-15,19,-66,19,19,-61,-67,-65,-58,19,-59,19,-60,]),'-':([0,2,3,5,7,10,11,12,13,14,15,16,17,18,19,20,25,26,28,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,99,101,103,104,105,106,107,110,111,112,113,116,117,120,122,126,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,],[20,20,-4,-6,38,-11,-12,-13,-14,-24,-21,-22,-23,-25,20,20,20,20,-73,20,-71,-72,-3,-5,-28,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,38,-24,-27,20,38,38,20,20,20,-30,-31,-32,-33,-37,-38,-39,-40,38,38,38,38,38,38,38,38,38,38,38,-26,-29,20,-75,-76,-25,38,-68,-25,-34,-35,-36,38,20,20,-62,-64,-16,-17,-18,-19,-20,20,-57,20,-74,-63,-15,20,-66,20,20,-61,-67,-65,-25,-58,20,-59,20,-60,]),'[':([0,2,3,5,10,11,12,13,19,20,21,25,26,28,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,95,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[21,21,-4,-6,-11,-12,-13,-14,21,21,59,21,21,69,21,-3,-5,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,59,21,-75,-76,-68,21,21,-62,-64,-16,-17,-18,-19,-20,21,-57,21,-63,-15,21,-66,21,21,-61,-67,-65,-58,21,-59,21,-60,]),'ZEROS':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[22,22,-4,-6,-11,-12,-13,-14,22,22,22,22,22,-3,-5,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-75,-76,-68,22,22,-62,-64,-16,-17,-18,-19,-20,22,-57,22,-63,-15,22,-66,22,22,-61,-67,-65,-58,22,-59,22,-60,]),'ONES':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[23,23,-4,-6,-11,-12,-13,-14,23,23,23,23,23,-3,-5,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-75,-76,-68,23,23,-62,-64,-16,-17,-18,-19,-20,23,-57,23,-63,-15,23,-66,23,23,-61,-67,-65,-58,23,-59,23,-60,]),'EYE':([0,2,3,5,10,11,12,13,19,20,25,26,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[24,24,-4,-6,-11,-12,-13,-14,24,24,24,24,24,-3,-5,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-75,-76,-68,24,24,-62,-64,-16,-17,-18,-19,-20,24,-57,24,-63,-15,24,-66,24,24,-61,-67,-65,-58,24,-59,24,-60,]),'PRINT':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[25,25,-4,-6,-11,-12,-13,-14,25,-3,-5,25,-75,-76,-68,25,25,-62,-64,-16,-17,-18,-19,-20,25,-57,25,-63,-15,25,-66,25,-61,-67,-65,-58,25,-59,25,-60,]),'RETURN':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[26,26,-4,-6,-11,-12,-13,-14,26,-3,-5,26,-75,-76,-68,26,26,-62,-64,-16,-17,-18,-19,-20,26,-57,26,-63,-15,26,-66,26,-61,-67,-65,-58,26,-59,26,-60,]),'FOR':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[27,27,-4,-6,-11,-12,-13,-14,27,-3,-5,27,-75,-76,-68,27,27,-62,-64,-16,-17,-18,-19,-20,27,-57,27,-63,-15,27,-66,27,-61,-67,-65,-58,27,-59,27,-60,]),'WHILE':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[29,29,-4,-6,-11,-12,-13,-14,29,-3,-5,29,-75,-76,-68,29,29,-62,-64,-16,-17,-18,-19,-20,29,-57,29,-63,-15,29,-66,29,-61,-67,-65,-58,29,-59,29,-60,]),'{':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[30,30,-4,-6,-11,-12,-13,-14,30,-3,-5,30,-75,-76,-68,133,30,-62,-64,-16,-17,-18,-19,-20,133,-57,133,-63,-15,133,-66,30,-61,-67,-65,-58,133,-59,133,-60,]),'IF':([0,2,3,5,10,11,12,13,30,34,35,71,101,103,106,116,117,120,122,126,129,130,131,132,133,135,136,138,139,140,141,143,144,145,146,148,149,150,151,152,],[31,31,-4,-6,-11,-12,-13,-14,31,-3,-5,31,-75,-76,-68,134,31,-62,-64,-16,-17,-18,-19,-20,134,-57,134,-63,-15,134,-66,31,-61,-67,-65,-58,134,-59,134,-60,]),'ID':([0,2,3,5,10,11,12,13,19,20,25,26,27,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,69,70,71,72,99,100,101,103,106,115,116,117,118,120,122,126,129,130,131,132,133,135,136,138,139,140,141,142,143,144,145,146,148,149,150,151,152,],[28,28,-4,-6,-11,-12,-13,-14,28,28,28,28,68,28,-3,-5,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,101,28,28,28,28,101,-75,-76,-68,101,28,28,101,-62,-64,-16,-17,-18,-19,-20,28,-57,28,-63,-15,28,-66,28,28,-61,-67,-65,-58,28,-59,28,-60,]),'}':([3,5,10,11,12,13,34,35,71,106,120,122,126,129,130,131,132,135,138,139,140,141,144,145,146,148,150,152,],[-4,-6,-11,-12,-13,-14,-3,-5,106,-68,-62,-64,-16,-17,-18,-19,-20,-57,-63,-15,145,-66,-61,-67,-65,-58,-59,-60,]),';':([4,6,7,8,9,14,15,16,17,18,28,32,33,36,57,58,65,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,110,111,112,113,121,123,124,125,127,128,137,],[35,-7,-8,-9,-10,-24,-21,-22,-23,-25,-73,-71,-72,-28,-24,-27,-69,-56,-70,-30,-31,-32,-33,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-26,-29,-34,-35,-36,-55,138,-77,-78,139,-79,-80,-74,]),'ELSE':([5,10,11,12,13,35,106,120,122,126,129,130,131,132,135,138,139,144,145,148,150,152,],[-6,-11,-12,-13,-14,-5,-68,-62,-64,-16,-17,-18,-19,-20,143,-63,-15,-61,-67,-58,151,-60,]),"'":([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[36,-24,-21,-22,-23,-25,-73,-71,-72,-28,36,-24,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-26,-29,-25,36,-25,-34,-35,-36,36,-74,-25,]),'+':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[37,-24,-21,-22,-23,-25,-73,-71,-72,-28,37,-24,-27,37,37,-30,-31,-32,-33,-37,-38,-39,-40,37,37,37,37,37,37,37,37,37,37,37,-26,-29,-25,37,-25,-34,-35,-36,37,-74,-25,]),'/':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[39,-24,-21,-22,-23,-25,-73,-71,-72,-28,39,-24,-27,39,39,39,39,-32,-33,39,39,-39,-40,39,39,39,39,39,39,39,39,39,39,39,-26,-29,-25,39,-25,-34,-35,-36,39,-74,-25,]),'*':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[40,-24,-21,-22,-23,-25,-73,-71,-72,-28,40,-24,-27,40,40,40,40,-32,-33,40,40,-39,-40,40,40,40,40,40,40,40,40,40,40,40,-26,-29,-25,40,-25,-34,-35,-36,40,-74,-25,]),'DOTADD':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[41,-24,-21,-22,-23,-25,-73,-71,-72,-28,41,-24,-27,41,41,-30,-31,-32,-33,-37,-38,-39,-40,41,41,41,41,41,41,41,41,41,41,41,-26,-29,-25,41,-25,-34,-35,-36,41,-74,-25,]),'DOTSUB':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[42,-24,-21,-22,-23,-25,-73,-71,-72,-28,42,-24,-27,42,42,-30,-31,-32,-33,-37,-38,-39,-40,42,42,42,42,42,42,42,42,42,42,42,-26,-29,-25,42,-25,-34,-35,-36,42,-74,-25,]),'DOTDIV':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[43,-24,-21,-22,-23,-25,-73,-71,-72,-28,43,-24,-27,43,43,43,43,-32,-33,43,43,-39,-40,43,43,43,43,43,43,43,43,43,43,43,-26,-29,-25,43,-25,-34,-35,-36,43,-74,-25,]),'DOTMUL':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[44,-24,-21,-22,-23,-25,-73,-71,-72,-28,44,-24,-27,44,44,44,44,-32,-33,44,44,-39,-40,44,44,44,44,44,44,44,44,44,44,44,-26,-29,-25,44,-25,-34,-35,-36,44,-74,-25,]),'GTE':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[45,-24,-21,-22,-23,-25,-73,-71,-72,-28,45,-24,-27,45,45,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,45,45,45,45,45,-26,-29,-25,45,-25,-34,-35,-36,45,-74,-25,]),'LTE':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[46,-24,-21,-22,-23,-25,-73,-71,-72,-28,46,-24,-27,46,46,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,46,46,46,46,46,-26,-29,-25,46,-25,-34,-35,-36,46,-74,-25,]),'NEQ':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[47,-24,-21,-22,-23,-25,-73,-71,-72,-28,47,-24,-27,47,47,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,47,47,47,47,47,-26,-29,-25,47,-25,-34,-35,-36,47,-74,-25,]),'EQ':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[48,-24,-21,-22,-23,-25,-73,-71,-72,-28,48,-24,-27,48,48,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,48,48,48,48,48,-26,-29,-25,48,-25,-34,-35,-36,48,-74,-25,]),'GT':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[49,-24,-21,-22,-23,-25,-73,-71,-72,-28,49,-24,-27,49,49,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,49,49,49,49,49,-26,-29,-25,49,-25,-34,-35,-36,49,-74,-25,]),'LT':([7,14,15,16,17,18,28,32,33,36,56,57,58,66,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,104,105,107,110,111,112,113,137,147,],[50,-24,-21,-22,-23,-25,-73,-71,-72,-28,50,-24,-27,50,50,-30,-31,-32,-33,-37,-38,-39,-40,None,None,None,None,None,None,50,50,50,50,50,-26,-29,-25,50,-25,-34,-35,-36,50,-74,-25,]),'=':([14,28,32,33,68,137,],[51,-73,-71,-72,100,-74,]),'ADDASSIGN':([14,28,32,33,137,],[52,-73,-71,-72,-74,]),'SUBASSIGN':([14,28,32,33,137,],[53,-73,-71,-72,-74,]),'MULASSIGN':([14,28,32,33,137,],[54,-73,-71,-72,-74,]),'DIVASSIGN':([14,28,32,33,137,],[55,-73,-71,-72,-74,]),')':([15,16,17,18,28,32,33,36,56,57,58,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,94,96,97,98,104,107,110,111,112,137,147,],[-21,-22,-23,-25,-73,-71,-72,-28,92,-24,-27,-30,-31,-32,-33,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-26,-29,110,111,112,116,117,-34,-35,-36,-74,149,]),',':([15,16,17,18,28,32,33,36,57,58,60,61,65,66,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,94,101,102,103,108,109,110,111,112,113,137,],[-21,-22,-23,-25,-73,-71,-72,-28,-24,-27,95,-53,99,-56,-30,-31,-32,-33,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-26,99,-29,-75,115,-76,-54,-52,-34,-35,-36,-55,-74,]),']':([15,16,17,18,28,32,33,36,57,58,60,61,66,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,94,101,103,108,109,110,111,112,113,119,137,],[-21,-22,-23,-25,-73,-71,-72,-28,-24,-27,94,-53,-56,-30,-31,-32,-33,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-26,108,-29,-75,-76,-54,-52,-34,-35,-36,-55,137,-74,]),':':([101,103,114,],[-75,-76,118,]),'BREAK':([101,103,116,120,122,126,129,130,131,132,133,136,138,139,140,141,144,145,146,149,150,151,152,],[-75,-76,127,-62,-64,-16,-17,-18,-19,-20,127,127,-63,-15,127,-66,-61,-67,-65,127,-59,127,-60,]),'CONTINUE':([101,103,116,120,122,126,129,130,131,132,133,136,138,139,140,141,144,145,146,149,150,151,152,],[-75,-76,128,-62,-64,-16,-17,-18,-19,-20,128,128,-63,-15,128,-66,-61,-67,-65,128,-59,128,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instr_rec':([0,30,],[2,71,]),'instr':([0,2,30,71,117,143,],[3,34,3,34,135,148,]),'instr_colon':([0,2,30,71,116,117,133,136,140,143,149,151,],[4,4,4,4,125,4,125,125,125,4,125,125,]),'instr_coloff':([0,2,30,71,117,143,],[5,5,5,5,5,5,]),'assign':([0,2,30,71,116,117,133,136,140,143,149,151,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'expr':([0,2,19,20,25,26,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,116,117,133,136,140,142,143,149,151,],[7,7,56,58,66,67,7,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,66,105,7,105,113,7,7,7,7,7,105,7,7,7,]),'print':([0,2,30,71,116,117,133,136,140,143,149,151,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'return':([0,2,30,71,116,117,133,136,140,143,149,151,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'for':([0,2,30,71,116,117,133,136,140,143,149,151,],[10,10,10,10,129,10,129,129,129,10,129,129,]),'while':([0,2,30,71,116,117,133,136,140,143,149,151,],[11,11,11,11,130,11,130,130,130,11,130,130,]),'block':([0,2,30,71,117,143,],[12,12,12,12,12,12,]),'if':([0,2,30,71,117,143,],[13,13,13,13,13,13,]),'id':([0,2,19,20,25,26,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,116,117,133,136,140,142,143,149,151,],[14,14,57,57,57,57,14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,14,57,57,14,14,14,14,14,57,14,14,14,]),'expr_rel':([0,2,19,20,25,26,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,116,117,133,136,140,142,143,149,151,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,104,18,107,18,18,18,18,18,18,147,18,18,18,]),'nonref':([0,2,19,20,25,26,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,116,117,133,136,140,142,143,149,151,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ref':([0,2,19,20,25,26,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,70,71,72,99,116,117,133,136,140,142,143,149,151,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'rows':([21,],[60,]),'row':([21,95,],[61,109,]),'cells':([25,59,],[65,93,]),'index':([69,100,115,118,],[102,114,119,136,]),'inside_loop':([116,133,136,140,149,151,],[120,141,144,146,150,152,]),'break_continue':([116,133,136,140,149,151,],[121,121,121,121,121,121,]),'instr_inside_loop':([116,133,136,140,149,151,],[122,122,122,122,122,122,]),'break':([116,133,136,140,149,151,],[123,123,123,123,123,123,]),'continue':([116,133,136,140,149,151,],[124,124,124,124,124,124,]),'instr_coloff_inside_loop':([116,133,136,140,149,151,],[126,126,126,126,126,126,]),'block_loop':([116,133,136,140,149,151,],[131,131,131,131,131,131,]),'if_inside_loop':([116,133,136,140,149,151,],[132,132,132,132,132,132,]),'inside_loop_rec':([133,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instr_rec','program',1,'p_program','Mparser.py',27),
  ('program -> <empty>','program',0,'p_program','Mparser.py',28),
  ('instr_rec -> instr_rec instr','instr_rec',2,'p_instr_rec','Mparser.py',32),
  ('instr_rec -> instr','instr_rec',1,'p_instr_rec','Mparser.py',33),
  ('instr -> instr_colon ;','instr',2,'p_instr','Mparser.py',40),
  ('instr -> instr_coloff','instr',1,'p_instr','Mparser.py',41),
  ('instr_colon -> assign','instr_colon',1,'p_instr_colon','Mparser.py',45),
  ('instr_colon -> expr','instr_colon',1,'p_instr_colon','Mparser.py',46),
  ('instr_colon -> print','instr_colon',1,'p_instr_colon','Mparser.py',47),
  ('instr_colon -> return','instr_colon',1,'p_instr_colon','Mparser.py',48),
  ('instr_coloff -> for','instr_coloff',1,'p_instr_coloff','Mparser.py',52),
  ('instr_coloff -> while','instr_coloff',1,'p_instr_coloff','Mparser.py',53),
  ('instr_coloff -> block','instr_coloff',1,'p_instr_coloff','Mparser.py',54),
  ('instr_coloff -> if','instr_coloff',1,'p_instr_coloff','Mparser.py',55),
  ('instr_inside_loop -> instr_colon ;','instr_inside_loop',2,'p_instr_inside_loop','Mparser.py',59),
  ('instr_inside_loop -> instr_coloff_inside_loop','instr_inside_loop',1,'p_instr_inside_loop','Mparser.py',60),
  ('instr_coloff_inside_loop -> for','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',64),
  ('instr_coloff_inside_loop -> while','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',65),
  ('instr_coloff_inside_loop -> block_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',66),
  ('instr_coloff_inside_loop -> if_inside_loop','instr_coloff_inside_loop',1,'p_instr_coloff_inside_loop','Mparser.py',67),
  ('expr -> INTNUM','expr',1,'p_expr_1','Mparser.py',73),
  ('expr -> FLOATNUM','expr',1,'p_expr_2','Mparser.py',77),
  ('expr -> STRING','expr',1,'p_expr_3','Mparser.py',81),
  ('expr -> id','expr',1,'p_expr_4','Mparser.py',85),
  ('expr -> expr_rel','expr',1,'p_expr_5','Mparser.py',89),
  ('expr -> ( expr )','expr',3,'p_expr_6','Mparser.py',93),
  ('expr -> - expr','expr',2,'p_expr_7','Mparser.py',97),
  ("expr -> expr '",'expr',2,'p_expr_8','Mparser.py',101),
  ('expr -> [ rows ]','expr',3,'p_expr_9','Mparser.py',105),
  ('expr -> expr + expr','expr',3,'p_expr_bin','Mparser.py',109),
  ('expr -> expr - expr','expr',3,'p_expr_bin','Mparser.py',110),
  ('expr -> expr / expr','expr',3,'p_expr_bin','Mparser.py',111),
  ('expr -> expr * expr','expr',3,'p_expr_bin','Mparser.py',112),
  ('expr -> ZEROS ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',116),
  ('expr -> ONES ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',117),
  ('expr -> EYE ( INTNUM )','expr',4,'p_expr_matrix','Mparser.py',118),
  ('expr -> expr DOTADD expr','expr',3,'p_expr_dot','Mparser.py',122),
  ('expr -> expr DOTSUB expr','expr',3,'p_expr_dot','Mparser.py',123),
  ('expr -> expr DOTDIV expr','expr',3,'p_expr_dot','Mparser.py',124),
  ('expr -> expr DOTMUL expr','expr',3,'p_expr_dot','Mparser.py',125),
  ('expr_rel -> expr GTE expr','expr_rel',3,'p_expr_rel','Mparser.py',129),
  ('expr_rel -> expr LTE expr','expr_rel',3,'p_expr_rel','Mparser.py',130),
  ('expr_rel -> expr NEQ expr','expr_rel',3,'p_expr_rel','Mparser.py',131),
  ('expr_rel -> expr EQ expr','expr_rel',3,'p_expr_rel','Mparser.py',132),
  ('expr_rel -> expr GT expr','expr_rel',3,'p_expr_rel','Mparser.py',133),
  ('expr_rel -> expr LT expr','expr_rel',3,'p_expr_rel','Mparser.py',134),
  ('assign -> id = expr','assign',3,'p_assign','Mparser.py',138),
  ('assign -> id ADDASSIGN expr','assign',3,'p_assign','Mparser.py',139),
  ('assign -> id SUBASSIGN expr','assign',3,'p_assign','Mparser.py',140),
  ('assign -> id MULASSIGN expr','assign',3,'p_assign','Mparser.py',141),
  ('assign -> id DIVASSIGN expr','assign',3,'p_assign','Mparser.py',142),
  ('rows -> rows , row','rows',3,'p_rows','Mparser.py',147),
  ('rows -> row','rows',1,'p_rows','Mparser.py',148),
  ('row -> [ cells ]','row',3,'p_row','Mparser.py',155),
  ('cells -> cells , expr','cells',3,'p_cells','Mparser.py',159),
  ('cells -> expr','cells',1,'p_cells','Mparser.py',160),
  ('if -> IF ( expr_rel ) instr','if',5,'p_if','Mparser.py',169),
  ('if -> IF ( expr_rel ) instr ELSE instr','if',7,'p_if','Mparser.py',170),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop','if_inside_loop',5,'p_if_inside_loop','Mparser.py',177),
  ('if_inside_loop -> IF ( expr_rel ) inside_loop ELSE inside_loop','if_inside_loop',7,'p_if_inside_loop','Mparser.py',178),
  ('for -> FOR ID = index : index inside_loop','for',7,'p_for','Mparser.py',185),
  ('while -> WHILE ( expr_rel ) inside_loop','while',5,'p_while','Mparser.py',189),
  ('inside_loop -> break_continue ;','inside_loop',2,'p_inside_loop','Mparser.py',193),
  ('inside_loop -> instr_inside_loop','inside_loop',1,'p_inside_loop','Mparser.py',194),
  ('inside_loop_rec -> inside_loop_rec inside_loop','inside_loop_rec',2,'p_inside_loop_rec','Mparser.py',198),
  ('inside_loop_rec -> inside_loop','inside_loop_rec',1,'p_inside_loop_rec','Mparser.py',199),
  ('block_loop -> { inside_loop_rec }','block_loop',3,'p_block_loop','Mparser.py',206),
  ('block -> { instr_rec }','block',3,'p_block','Mparser.py',210),
  ('print -> PRINT cells','print',2,'p_print','Mparser.py',216),
  ('return -> RETURN expr','return',2,'p_return','Mparser.py',220),
  ('id -> nonref','id',1,'p_id','Mparser.py',224),
  ('id -> ref','id',1,'p_id','Mparser.py',225),
  ('nonref -> ID','nonref',1,'p_nonref','Mparser.py',229),
  ('ref -> ID [ index , index ]','ref',6,'p_ref','Mparser.py',233),
  ('index -> ID','index',1,'p_index_ID','Mparser.py',237),
  ('index -> INTNUM','index',1,'p_index_IntNum','Mparser.py',241),
  ('break_continue -> break','break_continue',1,'p_break_continue','Mparser.py',245),
  ('break_continue -> continue','break_continue',1,'p_break_continue','Mparser.py',246),
  ('break -> BREAK','break',1,'p_break','Mparser.py',250),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',254),
]
